#!/usr/bin/env python3
import sys
import os

import decimal
from scapy.all import *

from source.lib import *
from source.parser import *
from source.extractors import *

def main():
    global flags
    try:
        pcap_file = sys.argv[1]
        Output.folder = sys.argv[2]
        for k, _ in flags.items(): # like -d
            if k in sys.argv:
                flags[k] = True

        create_folder(Output.folder, subfolder=False)
        for subfolder in ['stream', 'source', 'destination', 'protocol', 'dport', 'extracted']:
            create_folder(subfolder)
    except:
        traceback.print_exc()
        help()
        sys.exit(1)
    
    debug('Running in debug mode.') 

    for override in sys.argv[3:]:
        proto, _, port = override.partition(':')
        if port.isdigit() and proto in layer7_dict.keys():
            layer7_dict[proto][1].append(int(port))
        
    if run_command('tshark --help')[0] != 0:
        print('Cannot run tshark', file=sys.stderr)
        sys.exit(1)
    
    # run tshark statistics
    #   tshark hosts
    save_result('tshark_hosts', run_command(f'tshark -r {pcap_file} -q -z hosts'))
    save_result('tshark_credentials', run_command(f'tshark -r {pcap_file} -q -z credentials'))

    credentials = set()

    # parse the pcap, get dicts
    parser = Parser(pcap_file)

    stream_overview = []
    unknown_overview = []
    # deal with streams
    #pdb.set_trace()
    for i, (stream, packets) in enumerate(parser.packets.by('stream').items()):
        name = f'stream/{i}'
        debug(f'Processing stream {i}: {stream}')
        # prepare basic overview
        stream_overview.append(f'Stream:      {i}')
        stream_overview.append(f'Source:      {format_ip(stream[1])}:{stream[2]}')
        stream_overview.append(f'Destination: {format_ip(stream[3])}:{stream[4]}')
        stream_overview.append(f'Layer 4:     {layer4_dict.get(stream[0]).upper() or "UNKNOWN"}')
        
        # try to parse individual protocols
        matching_proto = [k for k,v in layer7_dict.items() 
                          if v[0] == layer4_dict.get(stream[0])
                          and stream[4] in v[1]]
        parsed_as = ''
        if 'telnet' in matching_proto:
            # TODO try to extract credentials
            debug('Parsing as telnet.', indent=2)
            payload = follow_all(packets)
            save_data(name, payload)
            symlinks(name, 'telnet', stream)
            parsed_as = 'telnet'

        if 'smtp' in matching_proto:
            # TODO extract credentials
            debug('Parsing as smtp.', indent=2)
            ra = TCPReassembler(stream, packets)
            try:
                use_current = False
                if ra.matches(is_server=False, regex=b'^DATA\\r\\n$'):
                    use_current = True
                email_counter = 0
                while True:
                    counted_name = f'{name}_{email_counter:03}'
                    # find DATA section
                    if use_current:
                        use_current = False
                    else:
                        ra.next(is_server=False, regex=b'^DATA\\r\\n$')
                    
                    # get email content
                    data = ra.next(is_server=False).get()[1]
                    if not data.endswith(b'\r\n.\r\n'):
                        print('[!] Incomplete DATA (no trailing dot present).', file=sys.stderr)
                    
                    # try to get email ID
                    try:
                        alt_name = None
                        response = ra.next(is_server=True).get()[1].strip()
                        if b'250 ok' in response.lower():
                            email_id = response.rpartition(b'=')[2].decode()
                            alt_name = f'{i}_{email_id}.eml'
                    except IndexError:
                        pass
                    except:
                        traceback.print_exc()
                    
                    # save files
                    save_data(counted_name, data)
                    symlinks(counted_name, 'smtp', stream, alt_name)
                    
                    # extract multiparts
                    extractor = SMTPExtractor(data)
                    if extractor.content:
                        create_folder(f'extracted/{i}')
                    for name, data in extractor.content.items():
                        name = f'extracted/{i}/{email_counter:03}_{name.decode()}'
                        save_data(name, data, prefix='  ')
                    email_counter += 1
                    
            except IndexError: # no more emails in the stream
                parsed_as = 'smtp'
                pass
            except:
                traceback.print_exc()
                break

        if 'imap' in matching_proto:
            debug('Parsing as imap.', indent=2)
            ra = TCPReassembler(stream, packets)
            #mailbox_name = b'unknown_mailbox'
            fetched = {}

            debug('Finding all mailbox lines...', indent=4)
            mailbox_lines = ra.find_all(is_server=False, regex=b'\\w+ LOGIN ".*" ".*"')
            for x in mailbox_lines:
                print(x)

            try:
                use_current = False 
                if ra.matches(is_server=True, regex=b'^\\* \\d+ FETCH '):
                    use_current = True
                while True:
                    # find FETCH section
                    if use_current:
                        use_current = False
                    else:
                        ra.next(is_server=True, regex=b'^\\* \\d+ FETCH ')
                    
                    # find last previous mailbox line
                    try:
                        last_mailbox_line = [x for x in mailbox_lines if ra > x][-1]
                        imap_credentials = re.match(b'\\w+ LOGIN "(.*)" "(.*)"', ra.get(last_mailbox_line)[1])
                        mailbox_name = imap_credentials.group(1)
                        mailbox_password = imap_credentials.group(2)
                        credentials.add(f'{mailbox_name.decode()}:{mailbox_password.decode()}')
                    except IndexError:
                        mailbox_name = b'unknown_mailbox'

                    # split messages
                    full_message = ra.get()[1]
                    string_index = 0
                    while True:
                        # extract all messages from the fetch
                        string_index = full_message.find(b' FETCH', string_index + 1)
                        if string_index < 0:
                            break
                        try:
                            uid = int(full_message[full_message.rfind(b' ', 0, string_index):string_index])
                        except ValueError: # this is the end
                            break
                        string_index = full_message.find(b'\r\n', string_index+1)
                        if string_index < 0:
                            break
                        try:
                            message_length = int(full_message[full_message.rfind(b'{', 0, string_index)+1:full_message.rfind(b'}', 0, string_index)])
                        except:
                            traceback_print_exc()
                            print('THAT IS IMAP FETCH SPLIT ERROR')
                            break
                        content = full_message[string_index+2:string_index+2+message_length]
                        string_index += message_length
                        #print(uid)
                        #print(content)
                        #print()
                        if (not fetched.get(uid) or 
                                len(fetched[uid]) < len(content)):
                            fetched[uid] = content

                    #messages = ra.get()[1].split(b'\r\n)\r\n*')
                    #for m in messages:
                    #    print(m[:50])
                    #for m in messages:
                    #    uid = int(m.split(b' ')[1])
                    #    counted_name = f'{name}_{uid:03}'
                    #    content = b'\n'.join(m.split(b'\n')[1:])
                    #    # keep the longest content 
                    #    # (cause something might be just headers)
                    #    if (not fetched.get(counted_name) or 
                    #            len(fetched[counted_name]) < len(content)):
                    #        fetched[counted_name] = content

            except IndexError: # no more emails in the stream
                parsed_as = 'imap'
                pass
            except:
                traceback.print_exc()
                break

            # save gathered messages and attempt to extract their contents
            for uid, data in fetched.items():
                counted_name = f'{name}_{uid:05}'
                save_data(counted_name, data)
                symlinks(counted_name, 'imap', stream, f'{mailbox_name.decode()}_{uid:05}.eml')

                # TODO extract multiparts
            

        # TODO more protocols here

        if parsed_as:
            stream_overview.append(f'Parsed as:   {parsed_as}')
        else:
            # TODO also save all payload?
            debug('Unknown protocol, ignoring.', indent=2)
            unknown_overview.append(f'{stream[1]} -> {stream[3]} ({layer4_dict.get(stream[0])}/{stream[4]})')
            stream_overview.append(f'Parsed as:   UNKNOWN')
        
        # TODO report unknown ports detected
        # prepare detailed statistics
        upstream = [p for p in packets if layer3(p).src == stream[1] and layer4(p).sport == stream[2]]
        downstream = [p for p in packets if layer3(p).src == stream[3] and layer4(p).sport == stream[4]]
        packets_upstream = len(upstream)
        packets_downstream = len(downstream)
        stream_overview.append(f'Packets:     {len(packets)} ({packets_upstream}/{packets_downstream})')
        data = sum(len(layer4(p).payload) for p in packets)
        data_upstream = sum(len(layer4(p).payload) for p in upstream)
        data_downstream = sum(len(layer4(p).payload) for p in downstream)
        stream_overview.append(f'Data bytes:  {data} B ({data_upstream}/{data_downstream})')
        total = sum(p.wirelen for p in packets)
        total_upstream = sum(p.wirelen for p in upstream)
        total_downstream = sum(p.wirelen for p in downstream)
        stream_overview.append(f'Total bytes: {total} B ({total_upstream}/{total_downstream})')
        
        start = datetime.fromtimestamp(int(packets[0].time)) #strftime('%Y-%m-%d %H:%M:%S', float(packets[0].time))
        end = datetime.fromtimestamp(int(packets[-1].time))
        duration = packets[-1].time - packets[0].time
        stream_overview.append(f'Start:       {start}')
        stream_overview.append(f'End:         {end}')
        stream_overview.append(f'Duration:    {duration} s')
        try:
            stream_overview.append(f'Speed:       {format_kbps(total, duration)} kbps ({format_kbps(total_upstream, duration)}/{format_kbps(total_downstream, duration)})')
        except decimal.DivisionByZero:
            pass
        
        stream_overview.append('-' * 40)
    if stream_overview:
        save_data('stream_overview', '\n'.join(stream_overview) + '\n')
    if unknown_overview:
        save_data('unknown_overview', '\n'.join(unknown_overview) + '\n')

    if credentials:
        save_data('credentials', '\n'.join(sorted(credentials)) + '\n')
    

def help():
    print(f'Usage: {sys.argv[0]} <pcap> <output_folder> [<protocol>:<port> ...]', file=sys.stderr)

if __name__ == "__main__":
    main()
